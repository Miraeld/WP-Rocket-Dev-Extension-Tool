{
  "WP Rocket Service Provider": {
    "prefix": "wpr-provider",
    "body": [
      "<?php",
      "",
      "namespace WP_Rocket\\\\Engine\\\\${1:FeatureName};",
      "",
      "use WP_Rocket\\\\Dependencies\\\\League\\\\Container\\\\ServiceProvider\\\\AbstractServiceProvider;",
      "",
      "/**",
      " * Service provider for ${1:FeatureName}",
      " */",
      "class ${1:FeatureName}ServiceProvider extends AbstractServiceProvider {",
      "\t/**",
      "\t * The provides array is a way to let the container know that a service",
      "\t * is provided by this service provider.",
      "\t *",
      "\t * @var array",
      "\t */",
      "\tprotected \\$provides = [",
      "\t\t$2",
      "\t];",
      "",
      "\t/**",
      "\t * Registers the services in the container",
      "\t *",
      "\t * @return void",
      "\t */",
      "\tpublic function register(): void {",
      "\t\t$3",
      "\t}",
      "}"
    ],
    "description": "Create a WP Rocket Service Provider"
  },
  "WP Rocket Subscriber": {
    "prefix": "wpr-subscriber",
    "body": [
      "<?php",
      "",
      "namespace WP_Rocket\\\\Engine\\\\${1:FeatureName}\\\\Subscriber;",
      "",
      "use WP_Rocket\\\\Event_Management\\\\Subscriber_Interface;",
      "",
      "/**",
      " * ${2:SubscriberName}",
      " */",
      "class ${2:SubscriberName} implements Subscriber_Interface {",
      "\t/**",
      "\t * Return an array of events that this subscriber listens to.",
      "\t *",
      "\t * @return array",
      "\t */",
      "\tpublic static function get_subscribed_events(): array {",
      "\t\treturn [",
      "\t\t\t'${3:hook_name}' => '${4:method_name}',",
      "\t\t];",
      "\t}",
      "",
      "\t/**",
      "\t * ${5:Method description}",
      "\t */",
      "\tpublic function ${4:method_name}() {",
      "\t\t$6",
      "\t}",
      "}"
    ],
    "description": "Create a WP Rocket Event Subscriber"
  },
  "WP Rocket Test Method": {
    "prefix": "wpr-test",
    "body": [
      "/**",
      " * @dataProvider ${1:dataProvider}",
      " */",
      "public function test${2:MethodName}( \\$${3:input}, \\$expected ) {",
      "\t$4",
      "\t\\$this->assertSame( \\$expected, \\$${3:input} );",
      "}"
    ],
    "description": "Create a PHPUnit test method with data provider"
  },
  "WP Rocket Data Provider": {
    "prefix": "wpr-dataprovider",
    "body": [
      "/**",
      " * Data provider for test${1:MethodName}",
      " */",
      "public function ${2:dataProviderName}() {",
      "\treturn [",
      "\t\t[",
      "\t\t\t'${3:input}'    => ${4:'value'},",
      "\t\t\t'expected' => ${5:'expected'},",
      "\t\t],",
      "\t];",
      "}"
    ],
    "description": "Create a PHPUnit data provider method"
  },
  "WP Rocket Test Class": {
    "prefix": "wpr-testclass",
    "body": [
      "<?php",
      "",
      "namespace WP_Rocket\\\\Tests\\\\${1:Integration};",
      "",
      "use WP_Rocket\\\\Tests\\\\${1:Integration}\\\\TestCase;",
      "",
      "/**",
      " * @covers \\\\${2:ClassName}",
      " * @group  ${3:GroupName}",
      " */",
      "class Test_${2:ClassName} extends TestCase {",
      "\t/**",
      "\t * Test setup",
      "\t */",
      "\tprotected function setUp(): void {",
      "\t\tparent::setUp();",
      "\t\t$4",
      "\t}",
      "",
      "\t/**",
      "\t * Test teardown",
      "\t */",
      "\tprotected function tearDown(): void {",
      "\t\t$5",
      "\t\tparent::tearDown();",
      "\t}",
      "",
      "\t/**",
      "\t * @dataProvider dataProvider",
      "\t */",
      "\tpublic function testExample( \\$input, \\$expected ) {",
      "\t\t\\$this->assertSame( \\$expected, \\$input );",
      "\t}",
      "",
      "\t/**",
      "\t * Data provider",
      "\t */",
      "\tpublic function dataProvider() {",
      "\t\treturn [",
      "\t\t\t[",
      "\t\t\t\t'input'    => 'test',",
      "\t\t\t\t'expected' => 'test',",
      "\t\t\t],",
      "\t\t];",
      "\t}",
      "}"
    ],
    "description": "Create a complete WP Rocket test class"
  },
  "WP Rocket PHPDoc Block": {
    "prefix": "wpr-doc",
    "body": [
      "/**",
      " * ${1:Description}",
      " *",
      " * @param ${2:type} \\$${3:param} ${4:Description}",
      " * @return ${5:void}",
      " */"
    ],
    "description": "Create a PHPDoc documentation block"
  },
  "WP Rocket Hook Registration": {
    "prefix": "wpr-hook",
    "body": [
      "'${1:hook_name}' => ['${2:method_name}', ${3:10}],"
    ],
    "description": "Register a hook in get_subscribed_events()"
  },
  "WP Rocket Filter Method": {
    "prefix": "wpr-filter",
    "body": [
      "/**",
      " * ${1:Filter description}",
      " *",
      " * @param ${2:mixed} \\$${3:value} ${4:Value description}",
      " * @return ${2:mixed}",
      " */",
      "public function ${5:filter_method}( \\$${3:value} ) {",
      "\t$6",
      "\treturn \\$${3:value};",
      "}"
    ],
    "description": "Create a filter method"
  },
  "WP Rocket Action Method": {
    "prefix": "wpr-action",
    "body": [
      "/**",
      " * ${1:Action description}",
      " *",
      " * @return void",
      " */",
      "public function ${2:action_method}() {",
      "\t$3",
      "}"
    ],
    "description": "Create an action method"
  },
  "WP Rocket Database Table Schema": {
    "prefix": "wpr-table",
    "body": [
      "/**",
      " * Get the table schema",
      " *",
      " * @return string",
      " */",
      "public function get_table_schema(): string {",
      "\treturn \"",
      "\t\tCREATE TABLE {\\$this->table_name} (",
      "\t\t\tid bigint(20) unsigned NOT NULL auto_increment,",
      "\t\t\t${1:column_name} ${2:varchar(255)} NOT NULL default '',",
      "\t\t\tcreated_at datetime NOT NULL default '0000-00-00 00:00:00',",
      "\t\t\tupdated_at datetime NOT NULL default '0000-00-00 00:00:00',",
      "\t\t\tPRIMARY KEY (id)",
      "\t\t) {\\$this->get_charset_collate()};",
      "\t\";",
      "}"
    ],
    "description": "Create a database table schema"
  }
}
